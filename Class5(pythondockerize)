Dockerfile Commands:

FROM → Specifies the base image
Every Dockerfile must start with a FROM instruction.(Ex: FROM amazonlinux:latest )

RUN → Executes commands during image build.
Used for installing software and dependencies. (Ex: RUN yum install git -y)

CMD → Defines the default command to run when the container starts.
Unlike RUN, CMD runs at runtime, not during the build. (ex: CMD ["/bin/bash"] )

ENTRYPOINT → Similar to CMD, but allows arguments to be appended.
Used for setting a fixed command while allowing additional parameters.(ex: ENTRYPOINT ["python", "app.py"] )

COPY → Copies files from the local machine to the container.
Good for copying static files like code, scripts, or configs. (ex: COPY index.html /var/www/html/index.html)

ADD → Similar to COPY, but supports remote URLs and auto-extracts archives.
Use COPY unless you specifically need ADD features. (ex: ADD myarchive.tar.gz /app/)

EXPOSE → Specifies the port the container listens on.
This is informational and does not publish the port automatically. (ex: EXPOSE 80)


Dockerizing sample python web-application :

Steps we have to do :

got to /opt in docker server and create app.py file and enter below python code.
then, create docker file using docker commands.
using docker file we have to build an image with following command( ex: docker build -t <imagerepository:tag> -f <name of the docker file> .)
docker build -t test_python:app -f dockerfile .
form that image we have to create the container below is the comamnd
docker run -it --name cont1 -p 8081:8080 <image_name/image_id>


======
Code : /opt/app.py

import os
from flask import Flask

app = Flask(__name__)  # Corrected _name_ to __name__

@app.route("/")
def main():
    return "Welcome to Batch15!"

@app.route("/how are you")
def hello():
    return "I am good, how about you?"

if __name__ == "__main__":  # Corrected _name_ to __name_ and _main_ to __main__
    app.run()



==============
Commands :

yum update -y
yum install python3 python3-pip pip -y
pip install flask
FLASK_APP=/opt/app.py flask run --host=0.0.0.0 --port=8080

================================

Dockerfile : ( 1. if OS is amazonlinux :) 

FROM amazonlinux
LABEL maintainer="SWETHA <swetha@gmail.com>"
RUN yum install python3 python3-pip pip -y
RUN pip install flask
COPY app.py /opt/app.py 
CMD FLASK_APP=/opt/app.py flask run --host=0.0.0.0 --port=8080
EXPOSE 8080
